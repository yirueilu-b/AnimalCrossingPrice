{"version":3,"sources":["Component/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["ScrollTop","props","children","window","trigger","useScrollTrigger","target","undefined","disableHysteresis","threshold","Zoom","in","onClick","event","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","BackToTop","Fragment","CssBaseline","AppBar","color","Toolbar","IconButton","edge","aria-label","onToggleDark","theme","Typography","variant","id","Fab","size","App","useState","palette","type","setTheme","muiTheme","createMuiTheme","Navbar","newPaletteType","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iYAeA,SAASA,EAAUC,GAAQ,IAChBC,EAAoBD,EAApBC,SAAUC,EAAUF,EAAVE,OAIXC,EAAUC,YAAiB,CAC7BC,OAAQH,EAASA,SAAWI,EAC5BC,mBAAmB,EACnBC,UAAW,MAWf,OACI,kBAACC,EAAA,EAAD,CAAMC,GAAIP,GACN,yBAAKQ,QAVO,SAACC,GACjB,IAAMC,GAAUD,EAAMP,OAAOS,eAAiBC,UAAUC,cAAc,uBAElEH,GACAA,EAAOI,eAAe,CAACC,SAAU,SAAUC,MAAO,YAMvBC,KAAK,gBAC3BnB,IAqCFoB,MAtBf,SAAmBrB,GACf,OACI,kBAAC,IAAMsB,SAAP,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,MAAM,WACV,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQH,MAAM,UAAUI,aAAW,OAAOlB,QAASX,EAAM8B,cACrD,UAAhB9B,EAAM+B,MAAoB,kBAAC,IAAD,MAAqB,kBAAC,IAAD,OAEpD,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,gCAGR,kBAACP,EAAA,EAAD,CAASQ,GAAG,uBACZ,kBAACnC,EAAcC,EACX,kBAACmC,EAAA,EAAD,CAAKC,KAAK,SACN,kBAAC,IAAD,U,gBCnCLC,MAxBf,WAAgB,IAAD,EACeC,mBAAS,CAC/BC,QAAS,CACLC,KAAM,WAHH,mBACJT,EADI,KACGU,EADH,KAcLC,EAAWC,YAAeZ,GAEhC,OACI,kBAAC,IAAD,CAAkBA,MAAOW,GACrB,kBAACnB,EAAA,EAAD,MACA,kBAACqB,EAAD,CAAQb,MAAOA,EAAMQ,QAAQC,KAAMV,aAbnB,WACpB,IAAIe,EAAwC,UAAvBd,EAAMQ,QAAQC,KAAmB,OAAS,QAC/DC,EAAS,CACLF,QAAS,CACLC,KAAMK,UCNFC,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f6395e0c.chunk.js","sourcesContent":["import React from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Zoom from '@material-ui/core/Zoom';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\r\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\r\n\r\nfunction ScrollTop(props) {\r\n    const {children, window} = props;\r\n    // Note that you normally won't need to set the window ref as useScrollTrigger\r\n    // will default to window.\r\n    // This is only being set here because the demo is in an iframe.\r\n    const trigger = useScrollTrigger({\r\n        target: window ? window() : undefined,\r\n        disableHysteresis: true,\r\n        threshold: 100,\r\n    });\r\n\r\n    const handleClick = (event) => {\r\n        const anchor = (event.target.ownerDocument || document).querySelector('#back-to-top-anchor');\r\n\r\n        if (anchor) {\r\n            anchor.scrollIntoView({behavior: 'smooth', block: 'center'});\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Zoom in={trigger}>\r\n            <div onClick={handleClick} role=\"presentation\">\r\n                {children}\r\n            </div>\r\n        </Zoom>\r\n    );\r\n}\r\n\r\n// ScrollTop.propTypes = {\r\n//     children: PropTypes.element.isRequired,\r\n//     /**\r\n//      * Injected by the documentation to work in an iframe.\r\n//      * You won't need it on your project.\r\n//      */\r\n//     window: PropTypes.func,\r\n// };\r\n\r\nfunction BackToTop(props) {\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline/>\r\n            <AppBar color=\"default\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"default\" aria-label=\"menu\" onClick={props.onToggleDark}>\r\n                        {props.theme === \"light\" ? <Brightness7Icon/> : <Brightness4Icon/>}\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">Animal Crossing Price List</Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Toolbar id=\"back-to-top-anchor\"/>\r\n            <ScrollTop {...props}>\r\n                <Fab size=\"small\">\r\n                    <KeyboardArrowUpIcon/>\r\n                </Fab>\r\n            </ScrollTop>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default BackToTop","import React from 'react';\nimport './Component/Table'\nimport Navbar from \"./Component/Navbar\"\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {useState} from 'react';\nimport {MuiThemeProvider, createMuiTheme} from \"@material-ui/core/styles\";\n// import Demo from './Component/demo'\n\nfunction App() {\n    const [theme, setTheme] = useState({\n        palette: {\n            type: \"light\"\n        }\n    });\n    const toggleDarkTheme = () => {\n        let newPaletteType = theme.palette.type === \"light\" ? \"dark\" : \"light\";\n        setTheme({\n            palette: {\n                type: newPaletteType\n            }\n        });\n    };\n    const muiTheme = createMuiTheme(theme);\n\n    return (\n        <MuiThemeProvider theme={muiTheme}>\n            <CssBaseline/>\n            <Navbar theme={theme.palette.type} onToggleDark={toggleDarkTheme}/>\n        </MuiThemeProvider>\n    );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}